{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "ErgoScript",
	"patterns": [
		{ "include": "#meta-block" }
	],
	"repository": {
		"meta-block": {
			"name": "meta.block.ergoscript",
			"begin": "\\{",
			"end": "\\}",
			"patterns": [
				{ "include": "#meta-bracket" },
				{ "include": "#meta-function" },
				{ "include": "#meta-type-annotation" },
				{ "include": "#comment" },
				{ "include": "#keyword" },
				{ "include": "#constant" },
				{ "include": "#string" },
				{ "include": "#storage" },
				{ "include": "#support" },
				{ "include": "#variable" },
				{ "include": "#punctuation" },
				{ "include": "$self" }
			],
			"repository": {
			}
		},
		"meta-bracket": {
			"patterns": [
				{
					"name": "meta.bracket.ergoscript",
					"match": "\\[|\\]"
				},
				{
					"name": "meta.bracket.parentheses.ergoscript",
					"match": "\\(|\\)"
				}
			]
		},
		"meta-function": {
			"name": "meta.function.ergoscript",	
			"match": "(def)(\\s*)([_$[:alpha:]][_$[:alnum:]]*)(\\!)?(\\()",
			"captures": {
				"1": { "name": "storage.type.function.ergoscript" },
				"3": { "name": "entity.name.function.ergoscript" }
			}
		},
		"meta-type-annotation": {
			"name": "meta.type.annotation.ergoscript",
			"match": "\\b(Unit|Boolean|Byte|Short|Int|Long|BigInt|SigmaProp|AvlTree|GroupElement|Box|Option|Coll|Numeric|Header|PreHeader)\\b",
			"captures": {
				"0": { "name": "entity.name.type.ergoscript" }
			}
		},
		"comment": {
			"patterns": [
				{ "include": "#line-comment" },
				{ "include": "#block" }
			],
			"repository": {
				"line-comment": {
					"name": "comment.line.ergoscript",
					"match": "//.*$"
				},
				"block": {
					"patterns": [
						{ "include": "#block-documentation" },
						{ "include": "#block-multi-line-comment" }
					],
					"repository": {
						"block-documentation": {
							"name": "comment.block.documentation.ergoscript",
							"begin": "/\\*\\*",
							"end": "\\*/"
						},
						"block-multi-line-comment": {
							"name": "comment.block.ergoscript",
							"begin": "/\\*",
							"end": "\\*/"
						}
					}
				}
			}
		},
		"keyword": {
			"patterns": [
				{ "include": "#control-flow" },
				{ "include": "#operator" }
			],
			"repository": {
				"control-flow": {
					"name": "keyword.control.flow.ergoscript",
					"match": "\\b(if|else)\\b"
				},
				"operator": {
					"patterns": [
						{ "include": "#operator-increment" },
						{ "include": "#operator-arithmetic" },
						{ "include": "#operator-comparison" },
						{ "include": "#operator-arrow" },
						{ "include": "#operator-assignment" },
						{ "include": "#operator-logical" },
						{ "include": "#operator-bitwise" },
						{ "include": "#operator-access-pair" },
						{ "include": "#operator-type-annotation" }
					],
					"repository": {
						"operator-increment": {
							"name": "keyword.operator.increment.ergoscript",
							"match": "\\+\\+"
						},
						"operator-arithmetic": {
							"name": "keyword.operator.arithmetic.ergoscript",
							"match": "\\+|\\-|\\*|\\/|\\%"
						},
						"operator-comparison": {
							"name": "keyword.operator.comparison.ergoscript",
							"match": "\\==|\\!=|\\<=|\\>=|\\<|\\>"
						},
						"operator-arrow": {
							"name": "keyword.operator.arrow.ergoscript",
							"match": "\\=>"
						},
						"operator-assignment": {
							"name": "keyword.operator.assigment.ergoscript",
							"match": "\\="
						},
						"operator-logical": {
							"name": "keyword.operator.logical.ergoscript",
							"match": "\\&\\&|\\|\\|"
						},
						"operator-bitwise": {
							"name": "keyword.operator.bitwise.ergoscript",
							"match": "(\\&)|(\\|)|(\\^)"
						},
						"operator-access-pair": {
							"name": "keyword.operator.access.pair.ergoscript",
							"match": "(_1)|(_2)"
						},
						"operator-type-annotation": {
							"name": "keyword.operator.type.annotation.ergoscript",
							"match": "\\:"
						}
					}
				}
			}
		},
		"constant": {
			"patterns": [
				{ "include": "#numeric"},
				{ "include": "#language" }
			],
			"repository": {
				"numeric": {
					"patterns": [
						{
							"name": "constant.numeric.ergoscript",
							"match": "\\b(0x[0-9a-fA-F]+|[0-9L]+?)\\b"
						}
					]
				},
				"language": {
					"patterns": [
						{
							"name": "constant.language.ergoscript",
							"match": "\\b(true|false)\\b"
						}
					]
				}
			}
		},
		"string": {
			"patterns": [
				{ 
					"name": "string.quoted.single.ergoscript",
					"begin": "'",
					"end": "'",
					"patterns": []
				},
				{
					"name": "string.quoted.double.ergoscript",
					"begin": "\"",
					"end": "\"",
					"patterns": []
				}
			],
			"repository": {
			}
		},
		"storage": {
			"patterns": [
				{
					"name": "storage.type.variable.ergoscript",
					"match": "\\b(val)\\b"
				},
				{
					"name": "storage.type.function.ergoscript",
					"match": "\\b(def)\\b"
				}
			]
		},
		"support": {
			"patterns": [
				{
					"name": "support.function.global.ergoscript",
					"match": "CONTEXT|allOf|anyOf|xorOf|atLeast|ZKProof|sigmaProp|blake2b256|sha256|byteArrayToBigInt|longToByteArray|decodePoint|getVar|proveDHTuple|proveDlog|fromBase58|fromBase64|PK|deserialize|substConstants"
				},
				{
					"name": "support.function.type.numeric.ergoscript",
					"match": "toByte|toShort|toInt|toLong|toBigInt"
				},
				{
					"name": "support.function.type.context.ergoscript",
					"match": "HEIGHT|SELF|INPUTS|dataInputs|OUTPUTS|LastBlockUtxoRootHash|headers|preHeader"
				},
				{
					"name": "support.function.type.header.ergoscript",
					"match": "id|version|parentId|ADProofsRoot|stateRoot|transactionsRoot|timestamp|nBits|height|extensionRoot|minerPk|powOnetimePk|powNonce|powDistance|votes"
				},
				{
					"name": "support.function.type.preheader.ergoscript",
					"match": "version|parentId|timestamp|nBits|height|minerPk|votes"
				},
				{
					"name": "support.function.type.box.ergoscript",
					"match": "value|id|propositionBytes|bytes|bytesWithoutRef|creationInfo|tokens|R4|R5|R6|R7|R8|R9" 
				},
				{
					"name": "support.function.type.groupelement.ergoscript",
					"match": "exp|multiply|negate|getEncoded"
				},
				{
					"name": "support.function.type.avltree.ergoscript",
					"match": "digest|enabledOperations|keyLength|valueLengthOpt|isInsertAllowed|isUpdateAllowed|isRemoveAllowed|updateDigest|updateOperations|contains|get|getMany|insert|update|remove"
				},
				{
					"name": "support.function.type.option.ergoscript",
					"match": "isDefined|getOrElse|get|map|filter"
				},
				{
					"name": "support.function.type.coll.ergoscript",
					"match": "size|apply|getOrElse|map|zip|exists|forall|filter|fold|indices|flatMap|patch|updated|updateMany|slice|append|indexOf"
				}
			]
		},
		"variable": {
			"patterns": [
				{ "include": "#variable-parameter-list" },
				{ "include": "#variable-declaration"}
			],
			"repository": {
				"variable-parameter-list": {
					"match": "(?<=[^\\._$a-zA-Z0-9])(`[^`]+`|[_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}][A-Z\\p{Lt}\\p{Lu}_a-z\\$\\p{Lo}\\p{Nl}\\p{Ll}0-9]*(?:(?<=_)[!#%&*+\\-\\/:<>=?@^|~\\p{Sm}\\p{So}]+)?)\\s*(:)\\s+",
					"captures": {
						"1": { "name": "variable.parameter.ergoscript" },
						"2": { "name": "keyword.operator.type.annotation.ergoscript" }
					}
				},
				"variable-declaration": {
					"match": "([_$[:alpha:]][_$[:alnum:]]*)(\\!)?",
					"captures": {
						"1": { "name": "variable.other.declaration.ergoscript" }
					}
				}
			}
		},
		"punctuation": {
			"patterns": [
				{
					"name": "punctuation.comma.ergoscript",
					"match": ","
				}
			]
		}
	},
	"scopeName": "source.ergoscript"
}